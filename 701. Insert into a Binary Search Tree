class Solution {
    public TreeNode insertIntoBST(TreeNode root, int val) {
        if(root == null){
            TreeNode n = new TreeNode(val);
            return n;
        }
        TreeNode curr = root;
        while(curr!=null)
        {
            if(curr.val > val)
            {
                if(curr.left!= null) curr = curr.left;
                else{
                    TreeNode n = new TreeNode(val);
                    curr.left = n;
                    break;
                }
            }
            else if(curr.val< val)
            {
                if(curr.right != null) curr= curr.right;
                else{
                    TreeNode n = new TreeNode(val);
                    curr.right = n;
                    break;
                }
            }
        }
        return root;
    }
}


** Simplified
class Solution {
    public TreeNode insertIntoBST(TreeNode root, int val) {
        if(root == null) return new TreeNode(val);
        TreeNode curr = root;
        while(true)
        {
            if(curr.val>val && curr.left == null)
            {
                curr.left = new TreeNode(val);
                break;
            }
            else if(curr.val>val) curr = curr.left;
            else if(curr.val<val && curr.right == null)
            {
                curr.right = new TreeNode(val);
                break;
            }
            else curr = curr.right;
        }
        return root;
    }
}
