** Iterative Approach
class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        ListNode n = new ListNode();
        ListNode newHead = n;
        while(list1!=null || list2!=null)
        {
            if(list1 == null)
            {
                n.next = list2;
                break;
                    
            }
            else if(list2 == null)
            {
                n.next = list1;
                break;
            }
            else if(list1.val<list2.val)
            {
                n.next = list1;
                list1 = list1.next;
            }
            else
            {
                n.next = list2;
                list2 = list2.next;
            }
            n = n.next;
        }
        return newHead.next;
    }
}

** Recursive Approach 
class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        ListNode n = null;
        if(list1 == null && list2!= null)
        {
            n = list2;
        }
        else if(list2== null && list1 != null)
        {
            n = list1;
        }
        else if(list1 != null && list2!= null){
            if(list1.val<list2.val)
            {
                n = list1;
                n.next = mergeTwoLists(list1.next, list2);
            }
            else
            {
                n = list2;
                n.next = mergeTwoLists(list1, list2.next);
            }
        }
        return n;
    }
}
